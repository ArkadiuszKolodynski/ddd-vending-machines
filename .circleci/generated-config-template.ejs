version: 2.1

orbs:
  node: circleci/node@5.2.0<% if ((branch === 'master' || branch === 'develop') && buildable_projects.includes('frontend')) { %>
  aws-cli: circleci/aws-cli@4.1.3<% } %>

defaults: &defaults
  resource_class: small
  docker:
    - image: cimg/node:22.1.0

commands:
  checkout_and_install:
    steps:
      - checkout
      - node/install-packages<%
  if (branch === 'master' || branch === 'develop') { 
  %>
  setup-buildx:
    steps:
      - checkout
      - run:
          name: Setup buildx and qemu
          command: |
            sudo apt-get update
            sudo apt-get install -y qemu-user-static binfmt-support
      - run:
          name: Check versions
          command: |
            qemu-aarch64-static --version
            update-binfmts --version 
      - run:
          name: Create builder
          command: |
            export REPO_ORG=$(echo $CIRCLE_PROJECT_USERNAME | tr '[:upper:]' '[:lower:]')
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --privileged --rm tonistiigi/binfmt --install arm64
            docker buildx create --name multiarch-builder
            docker buildx use multiarch-builder
            docker buildx inspect --bootstrap <% } %>
jobs:
  <% if (!buildable_projects.length && !lintable_projects.length && !testable_projects.length) { %>no-changes:
    resource_class: small
    steps:
      - run:
          name: No changes
          command: echo "No changes"<% } %>
  <% for (let i = 0; i < buildable_projects.length; i++) { %>
  build-<%= buildable_projects[i] %>:
    <<: *defaults
    <% Object.entries(parameters[buildable_projects[i]]?.build || {}).forEach(([key, value]) => { %><%= key %>: <%= value %>
    <% }); %>
    steps:
      - checkout_and_install
      - run:
          name: Build <%= buildable_projects[i] %>
          command: npm run build <%= buildable_projects[i] %>
  <% } %><% for (let i = 0; i < lintable_projects.length; i++) { %>
  lint-<%= lintable_projects[i] %>:
    <<: *defaults
    <% Object.entries(parameters[lintable_projects[i]]?.lint || {}).forEach(([key, value]) => { %><%= key %>: <%= value %>
    <% }); %>
    steps:
      - checkout_and_install
      - run:
          name: Lint <%= lintable_projects[i] %>
          command: npm run lint <%= lintable_projects[i] %>
  <% } %><% for (let i = 0; i < testable_projects.length; i++) { %>
  test-<%= testable_projects[i] %>:
    <<: *defaults
    <% Object.entries(parameters[testable_projects[i]]?.test || {}).forEach(([key, value]) => { %><%= key %>: <%= value %>
    <% }); %>
    steps:
      - checkout_and_install
      - run:
          name: Test <%= testable_projects[i] %>
          command: npm run test <%= testable_projects[i] %> -- --configuration ci
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
  <% } %><% if (branch === 'develop' || branch === 'master') {  for (let i = 0; i < buildable_projects.length; i++) { if (buildable_projects[i] !== 'frontend') { %>
  build-and-push-docker-image-<%= buildable_projects[i] %><%= branch === 'develop' ? '-dev': '' %>:
    docker:
      - image: cimg/base:current
    resource_class: medium+
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - setup-buildx
      - run:
          name: Build Docker image for <%= buildable_projects[i] %> and push to GHCR
          command: |
            export BUILDX_NO_DEFAULT_ATTESTATIONS=1
            export REPO_ORG=$(echo $CIRCLE_PROJECT_USERNAME | tr '[:upper:]' '[:lower:]')
            echo $GH_TOKEN | docker login ghcr.io --username $GH_USERNAME --password-stdin
            docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/$REPO_ORG/$CIRCLE_PROJECT_REPONAME/<%= buildable_projects[i] %>:$CIRCLE_SHA1 -t ghcr.io/$REPO_ORG/$CIRCLE_PROJECT_REPONAME/<%= buildable_projects[i] %>:<%= branch === "master" ? "latest" : "dev" %> --build-arg="NX_PROJECT_NAME=<%= buildable_projects[i] %>" --push .
  <% } else { %>build-and-upload-frontend-files:
    <<: *defaults
    <% Object.entries(parameters['frontend']?.test || {}).forEach(([key, value]) => { %><%= key %>: <%= value %>
    <% }); %>executor: aws-cli/default
    steps:
      - checkout_and_install
      - aws-cli/setup
      - run:
          name: Build frontend and upload
          command: |
            npm run build frontend
            aws s3 rm s3://ddd-vending-machines<%= branch === 'master' ? '-prod' : '-dev' %>/ --recursive --endpoint-url=$AWS_ENDPOINT_URL
            aws s3 cp ./dist/apps/frontend s3://ddd-vending-machines<%= branch === 'master' ? '-prod' : '-dev' %>/ --recursive --endpoint-url=$AWS_ENDPOINT_URL
    <% }}} if ((branch === 'develop' || branch === 'master') && buildable_projects.length) { %>
  push-git-tag:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Push git tag
          command: |
            git config user.email $GH_EMAIL
            git config user.name $GH_USERNAME
            git tag -a release<%= branch === 'master' ? '' : '-dev' %>-<< pipeline.number >> -m "Release <%= branch === 'master' ? '' : 'dev ' %>CircleCI build nr #<< pipeline.number >>"
            git push origin release<%= branch === 'master' ? '' : '-dev' %>-<< pipeline.number >>
  push-tags-to-k8s-manifests:
    <<: *defaults
    steps:
      - run:
          name: Push image tags in k8s manifests
          command: |
            export REPO_ORG=$(echo $CIRCLE_PROJECT_USERNAME | tr '[:upper:]' '[:lower:]')
            git clone $K8S_REPOSITORY_URL .
            git config user.email $GH_EMAIL
            git config user.name $GH_USERNAME
            find ./<%= branch === 'master' ? 'prod' : 'dev' %> -type f -exec sed -i -E "s|(image: ghcr.io/${REPO_ORG}/${CIRCLE_PROJECT_REPONAME}/.*:).*|\1${CIRCLE_SHA1}|g" {} \;
            git add .
            git commit -m "Update image tags in k8s manifests for CircleCI build nr #<< pipeline.number >>"
            git push origin master
  <% } %>
workflows:
  build-lint-test<%= branch === 'develop' || branch === 'master' ? '-deploy' : '' %>:
    jobs:
      <% for (let i = 0; i < buildable_projects.length; i++) { %>- build-<%= buildable_projects[i] %>
      <% } %>
      <% for (let i = 0; i < lintable_projects.length; i++) { %>- lint-<%= lintable_projects[i] %>
      <% } %>
      <% for (let i = 0; i < testable_projects.length; i++) { %>- test-<%= testable_projects[i] %>
      <% } %><% if (!buildable_projects.length && !lintable_projects.length && !testable_projects.length) { %>- no-changes<% } %>
      <% if (branch === 'develop' || branch === 'master') { %>- hold:
          type: approval
          requires:
            <% for (let i = 0; i < buildable_projects.length; i++) { %>- build-<%= buildable_projects[i] %>
            <% } %><% for (let i = 0; i < lintable_projects.length; i++) { %>- lint-<%= lintable_projects[i] %>
            <% } %><% for (let i = 0; i < testable_projects.length; i++) { %>- test-<%= testable_projects[i] %>
            <% }} %>
      <% if (branch === 'develop' || branch === 'master') { for (let i = 0; i < buildable_projects.length; i++) { if (buildable_projects[i] !== 'frontend') { %>- build-and-push-docker-image-<%= buildable_projects[i] %><%= branch === 'master' ? '': '-dev' %>:
          requires:
            - hold
      <% } else { %>- build-and-upload-frontend-files:
          requires:
            - hold
      <% }}} %><% if ((branch === 'develop' || branch === 'master') && buildable_projects.length) { %>- push-git-tag:
          requires:
            <% for (let i = 0; i < buildable_projects.length; i++) { if (buildable_projects[i] !== 'frontend') { %>- build-and-push-docker-image-<%= buildable_projects[i] %><%= branch === 'master' ? '': '-dev' %>
            <% } else { %>- build-and-upload-frontend-files
            <% }}} %>
      <% if (branch === 'develop' || branch === 'master') { %>- push-tags-to-k8s-manifests:
          requires:
            - push-git-tag<% } %>